```{r}
library(tidyverse)
library(here)
library(vroom)
```


```{r}
#Dec01
#find out the total difference between two columns from input

dec01 <- vroom(here("data-raw/01dec.txt"),col_names = F
                ) |> 
    select(X1, X4)
X1_sorted <- dec01 |> 
    select(X1) |> 
    arrange(X1) 

X4_sorted <- dec01 |> 
    select(X4) |> 
    arrange(X4) 

dec01_mod <- data_frame("X1" = X1_sorted,
                        "X2" = X4_sorted) |> 
    mutate(difference = abs(X1-X2)) 

dif_sum <- dec01_mod|> 
    summarise(sum = sum(difference))

#result is 	1666427

#calculate similarity score between columns

result_table <- data.frame(X1 = X1_sorted,
                           similarity = NA)

for (i in 1:length(X1_sorted$X1)){
    match_x2 <- X4_sorted |> 
        filter(X4 == result_table$X1[i])
    result_table$similarity[i] <- length(match_x2$X4)*result_table$X1[i]
    
}

result_part2 <- sum(result_table$similarity)
#answer is 24316233

```
```{r}
dec02 <- vroom(here("data-raw/02dec.txt"),
               col_names = F,delim = ",")

dec02_split <- dec02 |> 
    mutate(vectors = str_split(X1, " "),
           result = NA)

check_vector <- function(input_vector){
    result_table <- as.data.frame(matrix(nrow = (length(input_vector)-1)))
    colnames(result_table)<- "result"
    for (i in 1:(length(input_vector)-1)){
        if(as.numeric(input_vector[i])>as.numeric(input_vector[i+1])){
            difference <- as.numeric(input_vector[i])-as.numeric(input_vector[i+1])
            
            if(difference < 4){
                result_table$result[i]<- "decreasing"
            }
            else{
               result_table$result[i]<- "violation" 
            }
            
        }
        else if(as.numeric(input_vector[i])<as.numeric(input_vector[i+1])){
            difference <- as.numeric(input_vector[i+1])-as.numeric(input_vector[i])
            
            if(difference<4){
                result_table$result[i]<- "increasing"
            }
            else{
               result_table$result[i]<- "violation" 
            }
            
        } 
        else{
            result_table$result[i]<- "violation"
        }
    }
     if(all(result_table$result=="increasing")){
         return("safe")
     }
     else if(all(result_table$result=="decreasing")){
         return("safe")
     }
     else{
         return("unsafe")
     }
}

for (i in 1:length(dec02_split$vectors)){
    dec02_split$result[i]<- check_vector(dec02_split$vectors[[i]])
}

dec02_split |> count(result)
#result is 359

unsafe_reports <- dec02_split |> 
    filter(result == "unsafe")

###part two - remove 1 level that is a violation

problem_dampener <- function(input_vector){
    dampened <- 0
    for(i in(1:length(input_vector))){
        
        trimmed_result <- check_vector(input_vector[-i])
        if(trimmed_result=="safe"){
            dampened <- (dampened+1)
        }
    }
    return(dampened)
}


unsafe_reports <- unsafe_reports |> 
    mutate(dampened = NA)

for (i in 1:length(unsafe_reports$vectors)){
    unsafe_reports$dampened[i]<- problem_dampener(unsafe_reports$vectors[[i]])
}
    unsafe_reports |> filter(dampened!=0) |> count()

    59+359
    #answer is 418

```
```{r}
#load in mul instructions 

dec03 <- read_file(here("data-raw/03dec.txt"))
#construct regex to get mul
mul_instructions <- str_extract_all(dec03, pattern = "mul\\(\\d{1,3}\\,\\d{1,3}\\)")

#split into individual strings and cast as dataframe

mul_split <- tibble("mul_expression" = unlist(mul_instructions)) |> 
    mutate(number1 = str_extract(mul_expression, "(?<=mul\\()\\d{1,3}"),
           number2 = str_extract(mul_expression, "\\d{1,3}(?=\\))"),
           mul_sum = as.numeric(number1)*as.numeric(number2))

mul_split |> summarise(sum = sum(mul_sum))


#part 2 - remove all between a don't and a do instruction

dec03_mod <- str_remove_all(dec03, pattern = "[:space:]")
mul_trimmed_pre <- str_remove_all(dec03_mod, pattern = "don\\'t\\(\\)(.*?)do\\(\\)")
mul_trimmed <-  str_extract_all(mul_trimmed_pre, pattern = "mul\\(\\d{1,3}\\,\\d{1,3}\\)")
    
mul_split_trimmed <- tibble("mul_expression" = unlist(mul_trimmed)) |> 
    mutate(number1 = str_extract(mul_expression, "(?<=mul\\()\\d{1,3}"),
           number2 = str_extract(mul_expression, "\\d{1,3}(?=\\))"),
           mul_sum = as.numeric(number1)*as.numeric(number2))

mul_split_trimmed |> summarise(sum = sum(mul_sum))

```

```{r}
dec04 <- vroom(here("data-raw/dec04.txt"),delim = "\n",col_names = F)
dec04_mod <- as.tibble(str_split_fixed(string = dec04$X1,pattern = "",n = 140))

rotate_matrix <- function(target_matrix){
    rotated_matrix <- t(apply(target_matrix,2,rev))
    return(rotated_matrix)
}

find_xmas3 <- function(input_data) {
    christmas_tally <- 0
    for (i in 1:ncol(input_data)) {
        for (j in 1:(ncol(input_data) - 3)) {
            #horizontal forward
            if (input_data[i, j] == "X" &
                input_data[i, (j + 1)] == "M" &
                input_data[i, (j + 2)] == "A" & input_data[i, (j + 3)] == "S") {
                christmas_tally <- christmas_tally + 1
            }
            #horizontal backward
            if (input_data[i, j] == "S" &
                input_data[i, (j + 1)] == "A" &
                input_data[i, (j + 2)] == "M" & input_data[i, (j + 3)] == "X") {
                christmas_tally <- christmas_tally + 1
            }
        }
    }
    for (i in 1:(ncol(input_data)-3)) {
        for (j in 1:(ncol(input_data) - 3)) {
            {
                #diagonal forward
                if (input_data[i, j] == "X" &
                    input_data[(i + 1), (j + 1)] == "M" &
                    input_data[(i + 2), (j + 2)] == "A" & input_data[(i + 3), (j + 3)] == "S") {
                    christmas_tally <- christmas_tally + 1
                }
                #diagonal backward
                if (input_data[i, j] == "S" &
                    input_data[(i + 1), (j + 1)] == "A" &
                    input_data[(i + 2), (j + 2)] == "M" & input_data[(i + 3), (j + 3)] == "X") {
                    christmas_tally <- christmas_tally + 1
                }
            }
        }
        
    }
    return(christmas_tally)
}
find_xmas3(dec04_mod)+find_xmas3(rotate_matrix(dec04_mod))

#write function to recognize crossing of MAS

mas_detector <- function(input_data){
    christmas_tally <- 0
    for (i in 1:(ncol(input_data) - 2)) {
        for (j in 1:(ncol(input_data) - 2)) {
            if (input_data[i, j] == "M" &
                input_data[i + 1, j + 1] == "A" &
                input_data[i + 2, j + 2] == "S" &
                input_data[i + 2, j] == "M" & input_data[i, j + 2] == "S"
            ){
                christmas_tally <- christmas_tally + 1
            }
            if (input_data[i, j] == "S" &
                input_data[i + 1, j + 1] == "A" &
                input_data[i + 2, j + 2] == "M" &
                input_data[i + 2, j] == "S" & input_data[i, j + 2] == "M"
            ){
                christmas_tally <- christmas_tally + 1
            }
        }
    }
    return(christmas_tally)
}


mas_detector(dec04_mod)+mas_detector(rotate_matrix(dec04_mod))


```

```{r}
dec05_rules <- vroom(here("data-raw/05dec_A.txt"), delim =  "|",col_names = F)
dec05_data <- vroom(here("data-raw/05dec_B.txt"), delim = ";", col_names = F,
                    col_types = "c")

dec05_rules_test <- vroom(here("data-raw/05dec_A_test.txt"), delim =  "|",col_names = F)
dec05_data_test <- vroom(here("data-raw/05dec_B_test.txt"), delim = ";", col_names = F,
                    col_types = "c")

check_entry <- function(dataset,rules){
    #split string into vector
    data_vector <- unlist(str_split(dataset, ","))
    for (i in 1:length(data_vector)){
        target_number <- data_vector[i]
        for(j in i:length(data_vector)){
            neighbor_number <- data_vector[j]
            rule <- rules |> 
                filter(X1 == neighbor_number&X2 == target_number)
            
            if(length(rule$X1)!=0){
                return("violation")
            }
        }
    }
    return("approved")
}

verdict <- unlist(map(dec05_data$X1, ~check_entry(.,dec05_rules)))

dec05_result <- dec05_data |> 
    mutate(verdict = verdict) |> 
    filter(verdict == "approved") |> 
    mutate(vector = str_split(X1, ",")
        )
        
dec05_result$position <- map(dec05_result$vector,
                           ~as.integer(length(unlist(.))/2)+1)
dec05_result$middle <- map2(dec05_result$vector,
                            dec05_result$position,
                            ~unlist(.x)[.y])
dec05_result |> summarise(sum = sum(as.numeric(middle)))

#part 2
#correct sequences

correct_entry <-  function(data_vector,rules){
    #split string into vector
    for (i in 1:length(data_vector)){
        target_number <- data_vector[i]
        for(j in i:length(data_vector)){
            neighbor_number <- data_vector[j]
            rule <- rules |> 
                filter(X1 == neighbor_number&X2 == target_number)
            
            if(length(rule$X1)!=0){
                data_vector[j]<- target_number
                data_vector[i]<- neighbor_number
                return(data_vector)
        }
    }
    return(data_vector)
    }
}


dec05_subset <- dec05_data|> 
    mutate(verdict = verdict) |> 
    filter(verdict == "violation") |> 
    mutate(vector = str_split(X1, ","))
        
dec05_subset$fixed <- dec05_subset$vector



iterate_positions <- function(data_sheet, rules){
    for(i in 1:40){
    data_sheet$fixed <- map(data_sheet$fixed, ~correct_entry(., rules))
    data_sheet$verdict <- map(data_sheet$fixed, ~check_entry(.,rules))
    print(i)
    }
    beepr::beep(4)
    return(data_sheet)
}


dec05_subset <- iterate_positions(dec05_subset,
                                  dec05_rules)

dec05_subset_approved <- dec05_subset |> 
    filter(verdict == "approved")

dec_subset_violation <- dec05_subset |> 
    filter(verdict == "violation")
dec_subset_violation <- iterate_positions(dec_subset_violation,
                                  dec05_rules)
dec05_subset_approved <- bind_rows(dec05_subset_approved,
                                   subset(dec_subset_violation, verdict == "approved"))
#after 40 iterations, some are still not done. Subset and run again
dec_subset_violation <- subset(dec_subset_violation, verdict == "violation")
dec_subset_violation <- iterate_positions(dec_subset_violation,
                                  dec05_rules)
#after 40 iterations, some are still not done. Subset and run again
dec05_subset_approved <- bind_rows(dec05_subset_approved,
                                   subset(dec_subset_violation, verdict == "approved"))
dec_subset_violation <- subset(dec_subset_violation, verdict == "violation")
dec_subset_violation <- iterate_positions(dec_subset_violation,
                                  dec05_rules)

dec05_subset_approved <- bind_rows(dec05_subset_approved,
                                   dec_subset_violation)

dec05_subset_approved$position <- map(dec05_subset_approved$fixed,
                           ~as.integer(length(unlist(.))/2)+1)
dec05_subset_approved$middle <- map2(dec05_subset_approved$fixed,
                            dec05_subset_approved$position,
                            ~unlist(.x)[.y])
dec05_subset_approved  |> summarise(sum = sum(as.numeric(middle)))

```
